package com.example.awesomepizza.models;

import jakarta.persistence.*;
import java.util.LinkedHashSet;
import java.util.Set;

/**
 * Represents a pizza order in the "Awesome Pizza" ordering system.
 * This entity class is mapped to the 'orders' table in the database and is used to
 * persist and retrieve order information. It includes details such as the pizza type,
 * order status, and associated toppings.
 */
@Entity
@Table(name = "orders")
public class Order {

    /**
     * Unique identifier for the order, automatically generated by the database.
     * This field serves as the primary key of the 'orders' table.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "order_id", nullable = false)
    private Integer orderId;

    /**
     * Describes the type of pizza ordered, such as "Margherita", "Pepperoni", etc.
     * This string value is stored in the 'pizza_type' column of the database.
     */
    @Column(name = "pizza_type")
    private String pizzaType;

    /**
     * Current status of the order, indicating its progress in the system, which can be
     * "pending", "ready", or "completed". This helps manage the workflow of pizza preparation
     * and delivery effectively.
     */
    @Column(name = "status")
    private String status;

    /**
     * Collection of {@link OrderTopping} entities associated with this order.
     * This represents a one-to-many relationship with the 'order_toppings' table, allowing
     * each order to have multiple distinct toppings.
     */
    @OneToMany(mappedBy = "order", fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    private Set<OrderTopping> orderToppings = new LinkedHashSet<>();

    /**
     * Retrieves the unique identifier of this order.
     *
     * @return the unique identifier of the order
     */
    public Integer getOrderId() {
        return orderId;
    }

    /**
     * Sets the unique identifier of this order. This method is not typically used directly
     * as the ID is auto-generated by the database upon insertion.
     *
     * @param orderId the new identifier of the order
     */
    public void setOrderId(Integer orderId) {
        this.orderId = orderId;
    }

    /**
     * Retrieves the type of pizza ordered.
     *
     * @return the type of pizza as a string
     */
    public String getPizzaType() {
        return pizzaType;
    }

    /**
     * Sets the type of pizza for this order. This is generally called during order creation
     * and can be used for order modification as needed.
     *
     * @param pizzaType the type of pizza to be set
     */
    public void setPizzaType(String pizzaType) {
        this.pizzaType = pizzaType;
    }

    /**
     * Retrieves the current status of the order.
     *
     * @return the current status of the order
     */
    public String getStatus() {
        return status;
    }

    /**
     * Sets the status of this order, which is crucial for managing how the order is processed
     * within the ordering system.
     *
     * @param status the new status to be set for the order
     */
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * Retrieves the toppings associated with this order.
     *
     * @return a set of toppings as {@link OrderTopping} entities
     */
    public Set<OrderTopping> getOrderToppings() {
        return orderToppings;
    }

    /**
     * Sets the toppings for this order. This method is typically used when creating or updating
     * an order to specify which toppings are included.
     *
     * @param orderToppings the set of {@link OrderTopping} entities to be associated with this order
     */
    public void setOrderToppings(Set<OrderTopping> orderToppings) {
        this.orderToppings = orderToppings;
    }


}
