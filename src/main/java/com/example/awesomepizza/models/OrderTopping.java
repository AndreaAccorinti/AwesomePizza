package com.example.awesomepizza.models;

import com.fasterxml.jackson.annotation.JsonBackReference;
import jakarta.persistence.*;
import org.hibernate.annotations.OnDelete;
import org.hibernate.annotations.OnDeleteAction;

/**
 * Represents a topping associated with a pizza order in the "Awesome Pizza" ordering system.
 * This entity is linked to the 'order_toppings' table in the database, representing individual
 * toppings that can be added to an order.
 */
@Entity
@Table(name = "order_toppings")
public class OrderTopping {

    /**
     * Unique identifier for the order topping, automatically generated by the database.
     * This field serves as the primary key of the 'order_toppings' table.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "order_topping_id")
    private Integer orderToppingId;

    /**
     * Name of the topping. This is a simple string representing the topping added to the pizza,
     * such as "Cheese", "Pepperoni", etc.
     */
    @Column(name = "topping_name", nullable = false)
    private String toppingName;

    /**
     * The order to which this topping is associated. This setup creates a many-to-one relationship
     * between the OrderTopping and the Order, using a foreign key in this table pointing to the 'orders' table.
     * The {@link JsonBackReference} annotation is used to avoid infinite recursion during JSON serialization
     * when fetching the Order entity that includes this OrderTopping.
     * {@link OnDelete} with { OnDeleteAction.CASCADE} ensures that deleting an {@link Order}  will automatically
     * delete all associated {@link OrderTopping} , maintaining referential integrity.
     */
    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "order_id", nullable = false)
    @OnDelete(action = OnDeleteAction.CASCADE)
    @JsonBackReference
    private Order order;

    /**
     * Retrieves the unique identifier of this order topping.
     *
     * @return the unique identifier of the order topping
     */
    public Integer getOrderToppingId() {
        return orderToppingId;
    }

    /**
     * Sets the unique identifier for this order topping. Typically,this is not directly used as the ID is auto-generated.
     *
     * @param orderToppingId the new identifier for this topping
     */
    public void setOrderToppingId(Integer orderToppingId) {
        this.orderToppingId = orderToppingId;
    }

    /**
     * Retrieves the order to which this topping is associated.
     *
     * @return the associated order
     */
    public Order getOrder() {
        return order;
    }

    /**
     * Sets the order to which this topping should be linked. This is crucial for maintaining
     * the relationship between the topping and the specific order.
     *
     * @param order the order to associate this topping with
     */
    public void setOrder(Order order) {
        this.order = order;
    }

    /**
     * Retrieves the name of the topping.
     *
     * @return the name of the topping
     */
    public String getToppingName() {
        return toppingName;
    }

    /**
     * Sets the name of the topping. This is used to specify what type of topping is being added to the pizza.
     *
     * @param toppingName the name of the topping to set
     */
    public void setToppingName(String toppingName) {
        this.toppingName = toppingName;
    }
}
